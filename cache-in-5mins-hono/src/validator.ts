import { createInsertSchema, createSelectSchema } from "drizzle-zod";
import { v7 as uuidv7, stringify as uuidStringify } from "uuid";
import { z } from "zod/v4";

import { shortLinksTable } from "./schema";

// Validator and transformer for creating a new 'short_links' entry.
// Only the original URL is validated.
// All other fields are transformed/generated by our predefined rules.
export const shortLinkInsertSchema = createInsertSchema(shortLinksTable, {
  originalUrl: (val) => z.url(),
})
  .strict()
  .omit({
    id: true,
    shortCode: true,
    createdAt: true,
    expiresAt: true,
  })
  .transform((data) => {
    const idBytes = new Uint8Array(16);
    uuidv7(undefined, idBytes);
    const id = uuidStringify(idBytes);
    const shortCode = Buffer.from(idBytes).toString("base64url");
    const createdAt = new Date();
    const expiresAt = new Date(createdAt);
    expiresAt.setDate(expiresAt.getDate() + 30); // Expire in 30 days.
    return {
      ...data,
      id,
      shortCode,
      createdAt,
      expiresAt,
    };
  });

export type ShortLinkInsert = z.infer<typeof shortLinkInsertSchema>;

// Validator for selecting 'short_links' entries.
const shortLinkSelectSchema = createSelectSchema(shortLinksTable);
export type ShortLinkSelect = z.infer<typeof shortLinkSelectSchema>;
