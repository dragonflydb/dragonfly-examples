import { createInsertSchema, createSelectSchema } from "drizzle-zod";
import { v7 as uuidv7, parse as uuidParse } from "uuid";
import { z } from "zod/v4";

import { shortLinksTable } from "./schema";

// Validator and transformer for creating a new 'short_links' entry.
// Only the original URL is validated.
// All other fields are transformed/generated by our predefined rules.
export const shortLinkInsertSchema = createInsertSchema(shortLinksTable, {
  originalUrl: (val) => z.url(),
})
  .strict()
  .omit({
    id: true,
    shortCode: true,
    createdAt: true,
    expiresAt: true,
  })
  .transform((data) => {
    const id = uuidv7();
    const now = new Date();
    const expiresAt = new Date(now);
    expiresAt.setDate(expiresAt.getDate() + 30); // Expire in 30 days.
    return {
      ...data,
      id,
      shortCode: uuidParse(id).toBase64({
        alphabet: "base64url",
        omitPadding: true,
      }),
      createdAt: now,
      expiresAt: expiresAt,
    };
  });

export type ShortLinkInsert = z.infer<typeof shortLinkInsertSchema>;

// Validator for selecting 'short_links' entries.
const shortLinkSelectSchema = createSelectSchema(shortLinksTable);
export type ShortLinkSelect = z.infer<typeof shortLinkSelectSchema>;
